name: Test Deployment

on:
  workflow_dispatch:
  push:
    branches: [ test, develop ]

jobs:
  test-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test SSH Connection
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        script: |
          echo "🔍 연결 테스트 시작: $(date)"
          echo "📍 현재 위치: $(pwd)"
          echo "👤 사용자: $(whoami)"
          echo "🐧 OS: $(lsb_release -d 2>/dev/null | cut -f2- || cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
          echo "🐍 Python: $(python3 --version 2>/dev/null || echo '설치되지 않음')"
          echo "📦 Git: $(git --version 2>/dev/null || echo '설치되지 않음')"
          echo "💾 메모리: $(free -h | awk '/^Mem:/ {print $3"/"$2}')"
          echo "💿 디스크: $(df -h . | awk 'NR==2 {print $3"/"$2" ("$5" 사용)"}')"
          echo "🌐 네트워크: $(ping -c 1 google.com &> /dev/null && echo '연결됨' || echo '연결 실패')"
          echo "✅ 연결 테스트 완료: $(date)"
          
    - name: Quick Deploy Test
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 180s
        script: |
          echo "🚀 간단한 배포 테스트 시작"
          
          # 테스트 디렉토리 생성
          TEST_DIR="$HOME/travel-tracker-test"
          rm -rf "$TEST_DIR"
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"
          
          # 코드 클론
          git clone https://github.com/${{ github.repository }}.git .
          
          # Python 환경 설정
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # 기본 테스트
          python3 -c "
          import sys
          sys.path.insert(0, '.')
          from backend.app import app
          print('✅ Flask 앱 로드 성공')
          "
          
          # 정리
          cd "$HOME"
          rm -rf "$TEST_DIR"
          
          echo "✅ 배포 테스트 완료"
