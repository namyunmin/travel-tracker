name: 자동 배포

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Python 3.11 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 테스트 실행
      run: |
        if [ -d "tests" ]; then
          python -m pytest tests/ -v
        else
          echo "테스트 디렉토리가 없습니다. 테스트를 건너뜁니다."
        fi
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v3
    
    - name: SSH 키 설정
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: EC2에 배포
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ubuntu/my_web_app
          echo "📥 코드 업데이트 시작: $(date)"
          
          git fetch origin && git reset --hard origin/main
          echo "✅ 코드 업데이트 완료"
          
          sudo pkill -f "python" || true
          echo "✅ 기존 프로세스 중지"
          
          source venv/bin/activate
          pip install -r requirements.txt -q
          echo "✅ 의존성 설치 완료"
          
          nohup python3 main.py > app.log 2>&1 &
          echo "✅ 서버 시작"
          
          sleep 10
          
          if curl -s http://localhost:5000/api/get-markers > /dev/null; then
            echo "🎉 배포 성공: $(date)"
          else
            echo "❌ 배포 실패: $(date)"
          fi
        EOF
    
    - name: 배포 결과 확인
      run: |
        echo "배포가 완료되었습니다!"
        echo "애플리케이션 URL: http://${{ secrets.EC2_HOST }}:5000"